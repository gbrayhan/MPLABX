

Microchip Technology PIC18 LITE Macro Assembler V1.43 build -156212558 
                                                                                               Wed Sep 27 22:26:58 2017

Microchip Technology Omniscient Code Generator v1.43 (Free mode) build 201707250354
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1
    15                           	psect	text7,global,reloc=2,class=CODE,delta=1
    16                           	psect	text8,global,reloc=2,class=CODE,delta=1
    17                           	psect	text9,global,reloc=2,class=CODE,delta=1
    18                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    19                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    20  0000                     
    21                           ; Version 1.43
    22                           ; Generated 25/07/2017 GMT
    23                           ; 
    24                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    25                           ; All rights reserved.
    26                           ; 
    27                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    28                           ; 
    29                           ; Redistribution and use in source and binary forms, with or without modification, are
    30                           ; permitted provided that the following conditions are met:
    31                           ; 
    32                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    33                           ;        conditions and the following disclaimer.
    34                           ; 
    35                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    36                           ;        of conditions and the following disclaimer in the documentation and/or other
    37                           ;        materials provided with the distribution.
    38                           ; 
    39                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    40                           ;        software without specific prior written permission.
    41                           ; 
    42                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    43                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    44                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    45                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    46                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    47                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    48                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    49                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    50                           ; 
    51                           ; 
    52                           ; Code-generator required, PIC18F4550 Definitions
    53                           ; 
    54                           ; SFR Addresses
    55  0000                     _TRISD	set	3989
    56  0000                     _RD3	set	31771
    57  0000                     _RD2	set	31770
    58  0000                     _RD7	set	31775
    59  0000                     _RD6	set	31774
    60  0000                     _RD5	set	31773
    61  0000                     _RD4	set	31772
    62                           
    63                           	psect	smallconst
    64  000800                     __psmallconst:
    65                           	opt stack 0
    66  000800  00                 	db	0
    67  000801                     STR_2:
    68  000801  63                 	db	99	;'c'
    69  000802  6F                 	db	111	;'o'
    70  000803  6E                 	db	110	;'n'
    71  000804  74                 	db	116	;'t'
    72  000805  61                 	db	97	;'a'
    73  000806  72                 	db	114	;'r'
    74  000807  65                 	db	101	;'e'
    75  000808  20                 	db	32
    76  000809  73                 	db	115	;'s'
    77  00080A  75                 	db	117	;'u'
    78  00080B  20                 	db	32
    79  00080C  64                 	db	100	;'d'
    80  00080D  69                 	db	105	;'i'
    81  00080E  20                 	db	32
    82  00080F  6D                 	db	109	;'m'
    83  000810  65                 	db	101	;'e'
    84  000811  00                 	db	0
    85  000812                     STR_5:
    86  000812  3A                 	db	58	;':'
    87  000813  33                 	db	51	;'3'
    88  000814  20                 	db	32
    89  000815  3C                 	db	60	;'<'
    90  000816  33                 	db	51	;'3'
    91  000817  20                 	db	32
    92  000818  54                 	db	84	;'T'
    93  000819  69                 	db	105	;'i'
    94  00081A  20                 	db	32
    95  00081B  41                 	db	65	;'A'
    96  00081C  6D                 	db	109	;'m'
    97  00081D  6F                 	db	111	;'o'
    98  00081E  20                 	db	32
    99  00081F  3C                 	db	60	;'<'
   100  000820  33                 	db	51	;'3'
   101  000821  00                 	db	0
   102  000822                     STR_3:
   103  000822  44                 	db	68	;'D'
   104  000823  61                 	db	97	;'a'
   105  000824  72                 	db	114	;'r'
   106  000825  6C                 	db	108	;'l'
   107  000826  61                 	db	97	;'a'
   108  000827  20                 	db	32
   109  000828  26                 	db	38
   110  000829  20                 	db	32
   111  00082A  41                 	db	65	;'A'
   112  00082B  6C                 	db	108	;'l'
   113  00082C  66                 	db	102	;'f'
   114  00082D  61                 	db	97	;'a'
   115  00082E  6C                 	db	108	;'l'
   116  00082F  66                 	db	102	;'f'
   117  000830  61                 	db	97	;'a'
   118  000831  00                 	db	0
   119  000832                     STR_1:
   120  000832  4C                 	db	76	;'L'
   121  000833  65                 	db	101	;'e'
   122  000834  69                 	db	105	;'i'
   123  000835  20                 	db	32
   124  000836  73                 	db	115	;'s'
   125  000837  61                 	db	97	;'a'
   126  000838  20                 	db	32
   127  000839  63                 	db	99	;'c'
   128  00083A  68                 	db	104	;'h'
   129  00083B  65                 	db	101	;'e'
   130  00083C  20                 	db	32
   131  00083D  70                 	db	112	;'p'
   132  00083E  75                 	db	117	;'u'
   133  00083F  6F                 	db	111	;'o'
   134  000840  00                 	db	0
   135  0000                     
   136                           ; #config settings
   137  000841  00                 	db	0	; dummy byte at the end
   138  0000                     
   139                           	psect	cinit
   140  000B24                     __pcinit:
   141                           	opt stack 0
   142  000B24                     start_initialization:
   143                           	opt stack 0
   144  000B24                     __initialization:
   145                           	opt stack 0
   146  000B24                     end_of_initialization:
   147                           	opt stack 0
   148  000B24                     __end_of__initialization:
   149                           	opt stack 0
   150  000B24  0E00               	movlw	low (__Lsmallconst shr (0+16))
   151  000B26  6EF8               	movwf	tblptru,c
   152  000B28  0E08               	movlw	high __Lsmallconst
   153  000B2A  6EF7               	movwf	tblptrh,c
   154  000B2C  0100               	movlb	0
   155  000B2E  EF21  F004         	goto	_main	;jump to C main() function
   156                           tblptru	equ	0xFF8
   157                           tblptrh	equ	0xFF7
   158                           
   159                           	psect	cstackCOMRAM
   160  000001                     __pcstackCOMRAM:
   161                           	opt stack 0
   162  000001                     Lcd_Port@a:
   163                           	opt stack 0
   164                           
   165                           ; 1 bytes @ 0x0
   166  000001                     	ds	1
   167  000002                     ??_Lcd_Cmd:
   168  000002                     Lcd_Write_Char@temp:
   169                           	opt stack 0
   170                           
   171                           ; 1 bytes @ 0x1
   172  000002                     	ds	1
   173  000003                     Lcd_Cmd@a:
   174                           	opt stack 0
   175  000003                     Lcd_Write_Char@y:
   176                           	opt stack 0
   177                           
   178                           ; 1 bytes @ 0x2
   179  000003                     	ds	1
   180  000004                     ??_Lcd_Init:
   181  000004                     Lcd_Set_Cursor@b:
   182                           	opt stack 0
   183  000004                     Lcd_Write_Char@a:
   184                           	opt stack 0
   185                           
   186                           ; 1 bytes @ 0x3
   187  000004                     	ds	1
   188  000005                     Lcd_Set_Cursor@a:
   189                           	opt stack 0
   190  000005                     Lcd_Write_String@a:
   191                           	opt stack 0
   192                           
   193                           ; 2 bytes @ 0x4
   194  000005                     	ds	1
   195  000006                     Lcd_Set_Cursor@z:
   196                           	opt stack 0
   197                           
   198                           ; 1 bytes @ 0x5
   199  000006                     	ds	1
   200  000007                     ??_Lcd_Write_String:
   201  000007                     Lcd_Set_Cursor@y:
   202                           	opt stack 0
   203                           
   204                           ; 1 bytes @ 0x6
   205  000007                     	ds	1
   206  000008                     Lcd_Set_Cursor@temp:
   207                           	opt stack 0
   208                           
   209                           ; 1 bytes @ 0x7
   210  000008                     	ds	1
   211  000009                     Lcd_Write_String@i:
   212                           	opt stack 0
   213                           
   214                           ; 2 bytes @ 0x8
   215  000009                     	ds	2
   216  00000B                     ??_main:
   217                           
   218                           ; 1 bytes @ 0xA
   219  00000B                     	ds	2
   220  00000D                     main@a:
   221                           	opt stack 0
   222                           
   223                           ; 2 bytes @ 0xC
   224  00000D                     	ds	2
   225                           tblptru	equ	0xFF8
   226                           tblptrh	equ	0xFF7
   227                           
   228 ;;
   229 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   230 ;;
   231 ;; *************** function _main *****************
   232 ;; Defined at:
   233 ;;		line 14 in file "ProyectoMain.c"
   234 ;; Parameters:    Size  Location     Type
   235 ;;		None
   236 ;; Auto vars:     Size  Location     Type
   237 ;;  a               2   12[COMRAM] unsigned int 
   238 ;; Return value:  Size  Location     Type
   239 ;;                  2   61[None  ] int 
   240 ;; Registers used:
   241 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   242 ;; Tracked objects:
   243 ;;		On entry : 0/0
   244 ;;		On exit  : 0/0
   245 ;;		Unchanged: 0/0
   246 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   247 ;;      Params:         0       0       0       0       0       0       0       0       0
   248 ;;      Locals:         2       0       0       0       0       0       0       0       0
   249 ;;      Temps:          2       0       0       0       0       0       0       0       0
   250 ;;      Totals:         4       0       0       0       0       0       0       0       0
   251 ;;Total ram usage:        4 bytes
   252 ;; Hardware stack levels required when called:    3
   253 ;; This function calls:
   254 ;;		_Lcd_Clear
   255 ;;		_Lcd_Init
   256 ;;		_Lcd_Set_Cursor
   257 ;;		_Lcd_Shift_Left
   258 ;;		_Lcd_Shift_Right
   259 ;;		_Lcd_Write_Char
   260 ;;		_Lcd_Write_String
   261 ;; This function is called by:
   262 ;;		Startup code after reset
   263 ;; This function uses a non-reentrant model
   264 ;;
   265                           
   266                           	psect	text0
   267  000842                     __ptext0:
   268                           	opt stack 0
   269  000842                     _main:
   270                           	opt stack 28
   271                           
   272                           ;ProyectoMain.c: 16: unsigned int a;
   273                           ;ProyectoMain.c: 17: TRISD = 0x00;
   274                           
   275                           ;incstack = 0
   276  000842  0E00               	movlw	0
   277  000844  6E95               	movwf	3989,c	;volatile
   278                           
   279                           ;ProyectoMain.c: 18: Lcd_Init();
   280  000846  ECCB  F004         	call	_Lcd_Init	;wreg free
   281  00084A                     
   282                           ;ProyectoMain.c: 20: Lcd_Clear();
   283  00084A  ECA7  F005         	call	_Lcd_Clear	;wreg free
   284                           
   285                           ;ProyectoMain.c: 21: Lcd_Set_Cursor(1,1);
   286  00084E  0E01               	movlw	1
   287  000850  6E04               	movwf	Lcd_Set_Cursor@b,c
   288  000852  0E01               	movlw	1
   289  000854  EC03  F005         	call	_Lcd_Set_Cursor
   290                           
   291                           ;ProyectoMain.c: 22: Lcd_Write_String("Lei sa che puo");
   292  000858  0E32               	movlw	low STR_1
   293  00085A  6E05               	movwf	Lcd_Write_String@a,c
   294  00085C  0E08               	movlw	high STR_1
   295  00085E  6E06               	movwf	Lcd_Write_String@a+1,c
   296  000860  EC2B  F005         	call	_Lcd_Write_String	;wreg free
   297                           
   298                           ;ProyectoMain.c: 24: Lcd_Set_Cursor(2,1);
   299  000864  0E01               	movlw	1
   300  000866  6E04               	movwf	Lcd_Set_Cursor@b,c
   301  000868  0E02               	movlw	2
   302  00086A  EC03  F005         	call	_Lcd_Set_Cursor
   303                           
   304                           ;ProyectoMain.c: 25: Lcd_Write_String("contare su di me");
   305  00086E  0E01               	movlw	low STR_2
   306  000870  6E05               	movwf	Lcd_Write_String@a,c
   307  000872  0E08               	movlw	high STR_2
   308  000874  6E06               	movwf	Lcd_Write_String@a+1,c
   309  000876  EC2B  F005         	call	_Lcd_Write_String	;wreg free
   310                           
   311                           ;ProyectoMain.c: 26: _delay((unsigned long)((2000)*(8000000/4000.0)));
   312  00087A  0E15               	movlw	21
   313  00087C  6E0C               	movwf	(??_main+1)& (0+255),c
   314  00087E  0E4B               	movlw	75
   315  000880  6E0B               	movwf	??_main& (0+255),c
   316  000882  0EBE               	movlw	190
   317  000884                     u197:
   318  000884  2EE8               	decfsz	wreg,f,c
   319  000886  D7FE               	bra	u197
   320  000888  2E0B               	decfsz	??_main& (0+255),f,c
   321  00088A  D7FC               	bra	u197
   322  00088C  2E0C               	decfsz	(??_main+1)& (0+255),f,c
   323  00088E  D7FA               	bra	u197
   324  000890  D000               	nop2	
   325                           
   326                           ;ProyectoMain.c: 27: Lcd_Clear();
   327  000892  ECA7  F005         	call	_Lcd_Clear	;wreg free
   328                           
   329                           ;ProyectoMain.c: 29: Lcd_Set_Cursor(1,1);
   330  000896  0E01               	movlw	1
   331  000898  6E04               	movwf	Lcd_Set_Cursor@b,c
   332  00089A  0E01               	movlw	1
   333  00089C  EC03  F005         	call	_Lcd_Set_Cursor
   334                           
   335                           ;ProyectoMain.c: 30: Lcd_Write_String("Darla & Alfalfa");
   336  0008A0  0E22               	movlw	low STR_3
   337  0008A2  6E05               	movwf	Lcd_Write_String@a,c
   338  0008A4  0E08               	movlw	high STR_3
   339  0008A6  6E06               	movwf	Lcd_Write_String@a+1,c
   340  0008A8  EC2B  F005         	call	_Lcd_Write_String	;wreg free
   341                           
   342                           ;ProyectoMain.c: 31: Lcd_Set_Cursor(2,1);
   343  0008AC  0E01               	movlw	1
   344  0008AE  6E04               	movwf	Lcd_Set_Cursor@b,c
   345  0008B0  0E02               	movlw	2
   346  0008B2  EC03  F005         	call	_Lcd_Set_Cursor
   347                           
   348                           ;ProyectoMain.c: 32: Lcd_Write_String("<3");
   349  0008B6  0E1F               	movlw	low (STR_5+13)
   350  0008B8  6E05               	movwf	Lcd_Write_String@a,c
   351  0008BA  0E08               	movlw	high (STR_5+13)
   352  0008BC  6E06               	movwf	Lcd_Write_String@a+1,c
   353  0008BE  EC2B  F005         	call	_Lcd_Write_String	;wreg free
   354                           
   355                           ;ProyectoMain.c: 33: _delay((unsigned long)((2000)*(8000000/4000.0)));
   356  0008C2  0E15               	movlw	21
   357  0008C4  6E0C               	movwf	(??_main+1)& (0+255),c
   358  0008C6  0E4B               	movlw	75
   359  0008C8  6E0B               	movwf	??_main& (0+255),c
   360  0008CA  0EBE               	movlw	190
   361  0008CC                     u207:
   362  0008CC  2EE8               	decfsz	wreg,f,c
   363  0008CE  D7FE               	bra	u207
   364  0008D0  2E0B               	decfsz	??_main& (0+255),f,c
   365  0008D2  D7FC               	bra	u207
   366  0008D4  2E0C               	decfsz	(??_main+1)& (0+255),f,c
   367  0008D6  D7FA               	bra	u207
   368  0008D8  D000               	nop2	
   369                           
   370                           ;ProyectoMain.c: 34: Lcd_Clear();
   371  0008DA  ECA7  F005         	call	_Lcd_Clear	;wreg free
   372                           
   373                           ;ProyectoMain.c: 36: Lcd_Set_Cursor(1,1);
   374  0008DE  0E01               	movlw	1
   375  0008E0  6E04               	movwf	Lcd_Set_Cursor@b,c
   376  0008E2  0E01               	movlw	1
   377  0008E4  EC03  F005         	call	_Lcd_Set_Cursor
   378                           
   379                           ;ProyectoMain.c: 37: Lcd_Write_String(":3 <3 Ti Amo <3");
   380  0008E8  0E12               	movlw	low STR_5
   381  0008EA  6E05               	movwf	Lcd_Write_String@a,c
   382  0008EC  0E08               	movlw	high STR_5
   383  0008EE  6E06               	movwf	Lcd_Write_String@a+1,c
   384  0008F0  EC2B  F005         	call	_Lcd_Write_String	;wreg free
   385                           
   386                           ;ProyectoMain.c: 38: for(a=0;a<15;a++){
   387  0008F4  0E00               	movlw	0
   388  0008F6  6E0E               	movwf	main@a+1,c
   389  0008F8  0E00               	movlw	0
   390  0008FA  6E0D               	movwf	main@a,c
   391  0008FC                     l929:
   392  0008FC  500E               	movf	main@a+1,w,c
   393  0008FE  E114               	bnz	l941
   394  000900  0E0F               	movlw	15
   395  000902  5C0D               	subwf	main@a,w,c
   396  000904  B0D8               	btfsc	status,0,c
   397  000906  D010               	goto	u160
   398                           
   399                           ;ProyectoMain.c: 40: _delay((unsigned long)((300)*(8000000/4000.0)));
   400  000908  0E04               	movlw	4
   401  00090A  6E0C               	movwf	(??_main+1)& (0+255),c
   402  00090C  0E0C               	movlw	12
   403  00090E  6E0B               	movwf	??_main& (0+255),c
   404  000910  0E34               	movlw	52
   405  000912                     u217:
   406  000912  2EE8               	decfsz	wreg,f,c
   407  000914  D7FE               	bra	u217
   408  000916  2E0B               	decfsz	??_main& (0+255),f,c
   409  000918  D7FC               	bra	u217
   410  00091A  2E0C               	decfsz	(??_main+1)& (0+255),f,c
   411  00091C  D7FA               	bra	u217
   412                           
   413                           ;ProyectoMain.c: 41: Lcd_Shift_Left();
   414  00091E  ECA0  F005         	call	_Lcd_Shift_Left	;wreg free
   415  000922  4A0D               	infsnz	main@a,f,c
   416  000924  2A0E               	incf	main@a+1,f,c
   417  000926  D7EA               	goto	l929
   418  000928                     u160:
   419  000928                     l941:
   420                           
   421                           ;ProyectoMain.c: 42: }
   422                           ;ProyectoMain.c: 43: for(a=0;a<15;a++){
   423  000928  0E00               	movlw	0
   424  00092A  6E0E               	movwf	main@a+1,c
   425  00092C  0E00               	movlw	0
   426  00092E  6E0D               	movwf	main@a,c
   427  000930                     l943:
   428  000930  500E               	movf	main@a+1,w,c
   429  000932  E114               	bnz	l955
   430  000934  0E0F               	movlw	15
   431  000936  5C0D               	subwf	main@a,w,c
   432  000938  B0D8               	btfsc	status,0,c
   433  00093A  D010               	goto	u180
   434                           
   435                           ;ProyectoMain.c: 44: _delay((unsigned long)((300)*(8000000/4000.0)));
   436  00093C  0E04               	movlw	4
   437  00093E  6E0C               	movwf	(??_main+1)& (0+255),c
   438  000940  0E0C               	movlw	12
   439  000942  6E0B               	movwf	??_main& (0+255),c
   440  000944  0E34               	movlw	52
   441  000946                     u227:
   442  000946  2EE8               	decfsz	wreg,f,c
   443  000948  D7FE               	bra	u227
   444  00094A  2E0B               	decfsz	??_main& (0+255),f,c
   445  00094C  D7FC               	bra	u227
   446  00094E  2E0C               	decfsz	(??_main+1)& (0+255),f,c
   447  000950  D7FA               	bra	u227
   448                           
   449                           ;ProyectoMain.c: 45: Lcd_Shift_Right();
   450  000952  EC99  F005         	call	_Lcd_Shift_Right	;wreg free
   451  000956  4A0D               	infsnz	main@a,f,c
   452  000958  2A0E               	incf	main@a+1,f,c
   453  00095A  D7EA               	goto	l943
   454  00095C                     u180:
   455  00095C                     l955:
   456                           
   457                           ;ProyectoMain.c: 46: }
   458                           ;ProyectoMain.c: 48: Lcd_Clear();
   459  00095C  ECA7  F005         	call	_Lcd_Clear	;wreg free
   460                           
   461                           ;ProyectoMain.c: 49: Lcd_Set_Cursor(2,1);
   462  000960  0E01               	movlw	1
   463  000962  6E04               	movwf	Lcd_Set_Cursor@b,c
   464  000964  0E02               	movlw	2
   465  000966  EC03  F005         	call	_Lcd_Set_Cursor
   466                           
   467                           ;ProyectoMain.c: 50: Lcd_Write_Char('A');
   468  00096A  0E41               	movlw	65
   469  00096C  EC50  F005         	call	_Lcd_Write_Char
   470                           
   471                           ;ProyectoMain.c: 51: Lcd_Write_Char('&');
   472  000970  0E26               	movlw	38
   473  000972  EC50  F005         	call	_Lcd_Write_Char
   474                           
   475                           ;ProyectoMain.c: 52: Lcd_Write_Char('A');
   476  000976  0E41               	movlw	65
   477  000978  EC50  F005         	call	_Lcd_Write_Char
   478                           
   479                           ;ProyectoMain.c: 53: _delay((unsigned long)((2000)*(8000000/4000.0)));
   480  00097C  0E15               	movlw	21
   481  00097E  6E0C               	movwf	(??_main+1)& (0+255),c
   482  000980  0E4B               	movlw	75
   483  000982  6E0B               	movwf	??_main& (0+255),c
   484  000984  0EBE               	movlw	190
   485  000986                     u237:
   486  000986  2EE8               	decfsz	wreg,f,c
   487  000988  D7FE               	bra	u237
   488  00098A  2E0B               	decfsz	??_main& (0+255),f,c
   489  00098C  D7FC               	bra	u237
   490  00098E  2E0C               	decfsz	(??_main+1)& (0+255),f,c
   491  000990  D7FA               	bra	u237
   492  000992  D000               	nop2	
   493  000994  D75A               	goto	l62
   494  000996                     __end_of_main:
   495                           	opt stack 0
   496                           tblptru	equ	0xFF8
   497                           tblptrh	equ	0xFF7
   498                           wreg	equ	0xFE8
   499                           status	equ	0xFD8
   500                           
   501 ;; *************** function _Lcd_Write_String *****************
   502 ;; Defined at:
   503 ;;		line 97 in file "lcd.h"
   504 ;; Parameters:    Size  Location     Type
   505 ;;  a               2    4[COMRAM] PTR unsigned char 
   506 ;;		 -> STR_5(16), STR_4(3), STR_3(16), STR_2(17), 
   507 ;;		 -> STR_1(15), 
   508 ;; Auto vars:     Size  Location     Type
   509 ;;  i               2    8[COMRAM] int 
   510 ;; Return value:  Size  Location     Type
   511 ;;                  1    wreg      void 
   512 ;; Registers used:
   513 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   514 ;; Tracked objects:
   515 ;;		On entry : 0/0
   516 ;;		On exit  : 0/0
   517 ;;		Unchanged: 0/0
   518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   519 ;;      Params:         2       0       0       0       0       0       0       0       0
   520 ;;      Locals:         2       0       0       0       0       0       0       0       0
   521 ;;      Temps:          2       0       0       0       0       0       0       0       0
   522 ;;      Totals:         6       0       0       0       0       0       0       0       0
   523 ;;Total ram usage:        6 bytes
   524 ;; Hardware stack levels used:    1
   525 ;; Hardware stack levels required when called:    2
   526 ;; This function calls:
   527 ;;		_Lcd_Write_Char
   528 ;; This function is called by:
   529 ;;		_main
   530 ;; This function uses a non-reentrant model
   531 ;;
   532                           
   533                           	psect	text1
   534  000A56                     __ptext1:
   535                           	opt stack 0
   536  000A56                     _Lcd_Write_String:
   537                           	opt stack 28
   538                           
   539                           ;lcd.h: 99: int i;
   540                           ;lcd.h: 100: for(i=0;a[i]!='\0';i++)
   541                           
   542                           ;incstack = 0
   543  000A56  0E00               	movlw	0
   544  000A58  6E0A               	movwf	Lcd_Write_String@i+1,c
   545  000A5A  0E00               	movlw	0
   546  000A5C  6E09               	movwf	Lcd_Write_String@i,c
   547  000A5E  D010               	goto	l48
   548  000A60                     
   549                           ;lcd.h: 101: Lcd_Write_Char(a[i]);
   550  000A60  5009               	movf	Lcd_Write_String@i,w,c
   551  000A62  2405               	addwf	Lcd_Write_String@a,w,c
   552  000A64  6E07               	movwf	??_Lcd_Write_String& (0+255),c
   553  000A66  500A               	movf	Lcd_Write_String@i+1,w,c
   554  000A68  2006               	addwfc	Lcd_Write_String@a+1,w,c
   555  000A6A  6E08               	movwf	(??_Lcd_Write_String+1)& (0+255),c
   556  000A6C  C007  FFF6         	movff	??_Lcd_Write_String,tblptrl
   557  000A70  C008  FFF7         	movff	??_Lcd_Write_String+1,tblptrh
   558  000A74                     	if	0	;tblptru may be non-zero
   559  000A74                     	endif
   560  000A74                     	if	0	;tblptru may be non-zero
   561  000A74                     	endif
   562  000A74  0008               	tblrd		*
   563  000A76  50F5               	movf	tablat,w,c
   564  000A78  EC50  F005         	call	_Lcd_Write_Char
   565  000A7C  4A09               	infsnz	Lcd_Write_String@i,f,c
   566  000A7E  2A0A               	incf	Lcd_Write_String@i+1,f,c
   567  000A80                     l48:
   568  000A80  5009               	movf	Lcd_Write_String@i,w,c
   569  000A82  2405               	addwf	Lcd_Write_String@a,w,c
   570  000A84  6E07               	movwf	??_Lcd_Write_String& (0+255),c
   571  000A86  500A               	movf	Lcd_Write_String@i+1,w,c
   572  000A88  2006               	addwfc	Lcd_Write_String@a+1,w,c
   573  000A8A  6E08               	movwf	(??_Lcd_Write_String+1)& (0+255),c
   574  000A8C  C007  FFF6         	movff	??_Lcd_Write_String,tblptrl
   575  000A90  C008  FFF7         	movff	??_Lcd_Write_String+1,tblptrh
   576  000A94                     	if	0	;tblptru may be non-zero
   577  000A94                     	endif
   578  000A94                     	if	0	;tblptru may be non-zero
   579  000A94                     	endif
   580  000A94  0008               	tblrd		*
   581  000A96  50F5               	movf	tablat,w,c
   582  000A98  0900               	iorlw	0
   583  000A9A  B4D8               	btfsc	status,2,c
   584  000A9C  0012               	return	
   585  000A9E  D7E0               	goto	l49
   586  000AA0                     __end_of_Lcd_Write_String:
   587                           	opt stack 0
   588                           tblptru	equ	0xFF8
   589                           tblptrh	equ	0xFF7
   590                           tblptrl	equ	0xFF6
   591                           tablat	equ	0xFF5
   592                           wreg	equ	0xFE8
   593                           status	equ	0xFD8
   594                           
   595 ;; *************** function _Lcd_Write_Char *****************
   596 ;; Defined at:
   597 ;;		line 81 in file "lcd.h"
   598 ;; Parameters:    Size  Location     Type
   599 ;;  a               1    wreg     unsigned char 
   600 ;; Auto vars:     Size  Location     Type
   601 ;;  a               1    3[COMRAM] unsigned char 
   602 ;;  y               1    2[COMRAM] unsigned char 
   603 ;;  temp            1    1[COMRAM] unsigned char 
   604 ;; Return value:  Size  Location     Type
   605 ;;                  1    wreg      void 
   606 ;; Registers used:
   607 ;;		wreg, status,2, status,0, cstack
   608 ;; Tracked objects:
   609 ;;		On entry : 0/0
   610 ;;		On exit  : 0/0
   611 ;;		Unchanged: 0/0
   612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   613 ;;      Params:         0       0       0       0       0       0       0       0       0
   614 ;;      Locals:         3       0       0       0       0       0       0       0       0
   615 ;;      Temps:          0       0       0       0       0       0       0       0       0
   616 ;;      Totals:         3       0       0       0       0       0       0       0       0
   617 ;;Total ram usage:        3 bytes
   618 ;; Hardware stack levels used:    1
   619 ;; Hardware stack levels required when called:    1
   620 ;; This function calls:
   621 ;;		_Lcd_Port
   622 ;; This function is called by:
   623 ;;		_Lcd_Write_String
   624 ;;		_main
   625 ;; This function uses a non-reentrant model
   626 ;;
   627                           
   628                           	psect	text2
   629  000AA0                     __ptext2:
   630                           	opt stack 0
   631  000AA0                     _Lcd_Write_Char:
   632                           	opt stack 28
   633                           
   634                           ;incstack = 0
   635                           ;Lcd_Write_Char@a stored from wreg
   636  000AA0  6E04               	movwf	Lcd_Write_Char@a,c
   637                           
   638                           ;lcd.h: 83: char temp,y;
   639                           ;lcd.h: 84: temp = a&0x0F;
   640  000AA2  5004               	movf	Lcd_Write_Char@a,w,c
   641  000AA4  0B0F               	andlw	15
   642  000AA6  6E02               	movwf	Lcd_Write_Char@temp,c
   643                           
   644                           ;lcd.h: 85: y = a&0xF0;
   645  000AA8  5004               	movf	Lcd_Write_Char@a,w,c
   646  000AAA  0BF0               	andlw	240
   647  000AAC  6E03               	movwf	Lcd_Write_Char@y,c
   648                           
   649                           ;lcd.h: 86: RD2 = 1;
   650  000AAE  8483               	bsf	3971,2,c	;volatile
   651                           
   652                           ;lcd.h: 87: Lcd_Port(y>>4);
   653  000AB0  3803               	swapf	Lcd_Write_Char@y,w,c
   654  000AB2  0B0F               	andlw	15
   655  000AB4  EC6C  F005         	call	_Lcd_Port
   656                           
   657                           ;lcd.h: 88: RD3 = 1;
   658  000AB8  8683               	bsf	3971,3,c	;volatile
   659                           
   660                           ;lcd.h: 89: _delay((unsigned long)((40)*(8000000/4000000.0)));
   661  000ABA  0E1A               	movlw	26
   662  000ABC                     u247:
   663  000ABC  2EE8               	decfsz	wreg,f,c
   664  000ABE  D7FE               	bra	u247
   665  000AC0  D000               	nop2	
   666                           
   667                           ;lcd.h: 90: RD3 = 0;
   668  000AC2  9683               	bcf	3971,3,c	;volatile
   669                           
   670                           ;lcd.h: 91: Lcd_Port(temp);
   671  000AC4  5002               	movf	Lcd_Write_Char@temp,w,c
   672  000AC6  EC6C  F005         	call	_Lcd_Port
   673                           
   674                           ;lcd.h: 92: RD3 = 1;
   675  000ACA  8683               	bsf	3971,3,c	;volatile
   676                           
   677                           ;lcd.h: 93: _delay((unsigned long)((40)*(8000000/4000000.0)));
   678  000ACC  0E1A               	movlw	26
   679  000ACE                     u257:
   680  000ACE  2EE8               	decfsz	wreg,f,c
   681  000AD0  D7FE               	bra	u257
   682  000AD2  D000               	nop2	
   683                           
   684                           ;lcd.h: 94: RD3 = 0;
   685  000AD4  9683               	bcf	3971,3,c	;volatile
   686  000AD6  0012               	return		;funcret
   687  000AD8                     __end_of_Lcd_Write_Char:
   688                           	opt stack 0
   689                           tblptru	equ	0xFF8
   690                           tblptrh	equ	0xFF7
   691                           tblptrl	equ	0xFF6
   692                           tablat	equ	0xFF5
   693                           wreg	equ	0xFE8
   694                           status	equ	0xFD8
   695                           
   696 ;; *************** function _Lcd_Shift_Right *****************
   697 ;; Defined at:
   698 ;;		line 104 in file "lcd.h"
   699 ;; Parameters:    Size  Location     Type
   700 ;;		None
   701 ;; Auto vars:     Size  Location     Type
   702 ;;		None
   703 ;; Return value:  Size  Location     Type
   704 ;;                  1    wreg      void 
   705 ;; Registers used:
   706 ;;		wreg, status,2, cstack
   707 ;; Tracked objects:
   708 ;;		On entry : 0/0
   709 ;;		On exit  : 0/0
   710 ;;		Unchanged: 0/0
   711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   712 ;;      Params:         0       0       0       0       0       0       0       0       0
   713 ;;      Locals:         0       0       0       0       0       0       0       0       0
   714 ;;      Temps:          0       0       0       0       0       0       0       0       0
   715 ;;      Totals:         0       0       0       0       0       0       0       0       0
   716 ;;Total ram usage:        0 bytes
   717 ;; Hardware stack levels used:    1
   718 ;; Hardware stack levels required when called:    2
   719 ;; This function calls:
   720 ;;		_Lcd_Cmd
   721 ;; This function is called by:
   722 ;;		_main
   723 ;; This function uses a non-reentrant model
   724 ;;
   725                           
   726                           	psect	text3
   727  000B32                     __ptext3:
   728                           	opt stack 0
   729  000B32                     _Lcd_Shift_Right:
   730                           	opt stack 28
   731                           
   732                           ;lcd.h: 106: Lcd_Cmd(0x01);
   733                           
   734                           ;incstack = 0
   735  000B32  0E01               	movlw	1
   736  000B34  EC82  F005         	call	_Lcd_Cmd
   737                           
   738                           ;lcd.h: 107: Lcd_Cmd(0x0C);
   739  000B38  0E0C               	movlw	12
   740  000B3A  EC82  F005         	call	_Lcd_Cmd
   741  000B3E  0012               	return		;funcret
   742  000B40                     __end_of_Lcd_Shift_Right:
   743                           	opt stack 0
   744                           tblptru	equ	0xFF8
   745                           tblptrh	equ	0xFF7
   746                           tblptrl	equ	0xFF6
   747                           tablat	equ	0xFF5
   748                           wreg	equ	0xFE8
   749                           status	equ	0xFD8
   750                           
   751 ;; *************** function _Lcd_Shift_Left *****************
   752 ;; Defined at:
   753 ;;		line 110 in file "lcd.h"
   754 ;; Parameters:    Size  Location     Type
   755 ;;		None
   756 ;; Auto vars:     Size  Location     Type
   757 ;;		None
   758 ;; Return value:  Size  Location     Type
   759 ;;                  1    wreg      void 
   760 ;; Registers used:
   761 ;;		wreg, status,2, cstack
   762 ;; Tracked objects:
   763 ;;		On entry : 0/0
   764 ;;		On exit  : 0/0
   765 ;;		Unchanged: 0/0
   766 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   767 ;;      Params:         0       0       0       0       0       0       0       0       0
   768 ;;      Locals:         0       0       0       0       0       0       0       0       0
   769 ;;      Temps:          0       0       0       0       0       0       0       0       0
   770 ;;      Totals:         0       0       0       0       0       0       0       0       0
   771 ;;Total ram usage:        0 bytes
   772 ;; Hardware stack levels used:    1
   773 ;; Hardware stack levels required when called:    2
   774 ;; This function calls:
   775 ;;		_Lcd_Cmd
   776 ;; This function is called by:
   777 ;;		_main
   778 ;; This function uses a non-reentrant model
   779 ;;
   780                           
   781                           	psect	text4
   782  000B40                     __ptext4:
   783                           	opt stack 0
   784  000B40                     _Lcd_Shift_Left:
   785                           	opt stack 28
   786                           
   787                           ;lcd.h: 112: Lcd_Cmd(0x01);
   788                           
   789                           ;incstack = 0
   790  000B40  0E01               	movlw	1
   791  000B42  EC82  F005         	call	_Lcd_Cmd
   792                           
   793                           ;lcd.h: 113: Lcd_Cmd(0x08);
   794  000B46  0E08               	movlw	8
   795  000B48  EC82  F005         	call	_Lcd_Cmd
   796  000B4C  0012               	return		;funcret
   797  000B4E                     __end_of_Lcd_Shift_Left:
   798                           	opt stack 0
   799                           tblptru	equ	0xFF8
   800                           tblptrh	equ	0xFF7
   801                           tblptrl	equ	0xFF6
   802                           tablat	equ	0xFF5
   803                           wreg	equ	0xFE8
   804                           status	equ	0xFD8
   805                           
   806 ;; *************** function _Lcd_Set_Cursor *****************
   807 ;; Defined at:
   808 ;;		line 41 in file "lcd.h"
   809 ;; Parameters:    Size  Location     Type
   810 ;;  a               1    wreg     unsigned char 
   811 ;;  b               1    3[COMRAM] unsigned char 
   812 ;; Auto vars:     Size  Location     Type
   813 ;;  a               1    4[COMRAM] unsigned char 
   814 ;;  temp            1    7[COMRAM] unsigned char 
   815 ;;  y               1    6[COMRAM] unsigned char 
   816 ;;  z               1    5[COMRAM] unsigned char 
   817 ;; Return value:  Size  Location     Type
   818 ;;                  1    wreg      void 
   819 ;; Registers used:
   820 ;;		wreg, status,2, status,0, cstack
   821 ;; Tracked objects:
   822 ;;		On entry : 0/0
   823 ;;		On exit  : 0/0
   824 ;;		Unchanged: 0/0
   825 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   826 ;;      Params:         1       0       0       0       0       0       0       0       0
   827 ;;      Locals:         4       0       0       0       0       0       0       0       0
   828 ;;      Temps:          0       0       0       0       0       0       0       0       0
   829 ;;      Totals:         5       0       0       0       0       0       0       0       0
   830 ;;Total ram usage:        5 bytes
   831 ;; Hardware stack levels used:    1
   832 ;; Hardware stack levels required when called:    2
   833 ;; This function calls:
   834 ;;		_Lcd_Cmd
   835 ;; This function is called by:
   836 ;;		_main
   837 ;; This function uses a non-reentrant model
   838 ;;
   839                           
   840                           	psect	text5
   841  000A06                     __ptext5:
   842                           	opt stack 0
   843  000A06                     _Lcd_Set_Cursor:
   844                           	opt stack 28
   845                           
   846                           ;incstack = 0
   847                           ;Lcd_Set_Cursor@a stored from wreg
   848  000A06  6E05               	movwf	Lcd_Set_Cursor@a,c
   849                           
   850                           ;lcd.h: 43: char temp,z,y;
   851                           ;lcd.h: 44: if(a == 1)
   852  000A08  0405               	decf	Lcd_Set_Cursor@a,w,c
   853  000A0A  A4D8               	btfss	status,2,c
   854  000A0C  D010               	goto	l36
   855                           
   856                           ;lcd.h: 45: {
   857                           ;lcd.h: 46: temp = 0x80 + b - 1;
   858  000A0E  5004               	movf	Lcd_Set_Cursor@b,w,c
   859  000A10  0F7F               	addlw	127
   860  000A12  6E08               	movwf	Lcd_Set_Cursor@temp,c
   861                           
   862                           ;lcd.h: 47: z = temp>>4;
   863  000A14  3808               	swapf	Lcd_Set_Cursor@temp,w,c
   864  000A16  0B0F               	andlw	15
   865  000A18  6E06               	movwf	Lcd_Set_Cursor@z,c
   866                           
   867                           ;lcd.h: 48: y = temp & 0x0F;
   868  000A1A  5008               	movf	Lcd_Set_Cursor@temp,w,c
   869  000A1C  0B0F               	andlw	15
   870  000A1E  6E07               	movwf	Lcd_Set_Cursor@y,c
   871                           
   872                           ;lcd.h: 49: Lcd_Cmd(z);
   873  000A20  5006               	movf	Lcd_Set_Cursor@z,w,c
   874  000A22  EC82  F005         	call	_Lcd_Cmd
   875                           
   876                           ;lcd.h: 50: Lcd_Cmd(y);
   877  000A26  5007               	movf	Lcd_Set_Cursor@y,w,c
   878  000A28  EC82  F005         	call	_Lcd_Cmd
   879                           
   880                           ;lcd.h: 51: }
   881  000A2C  0012               	return	
   882  000A2E                     l36:
   883                           
   884                           ;lcd.h: 52: else if(a == 2)
   885  000A2E  0E02               	movlw	2
   886  000A30  1805               	xorwf	Lcd_Set_Cursor@a,w,c
   887  000A32  A4D8               	btfss	status,2,c
   888  000A34  0012               	return	
   889                           
   890                           ;lcd.h: 53: {
   891                           ;lcd.h: 54: temp = 0xC0 + b - 1;
   892  000A36  5004               	movf	Lcd_Set_Cursor@b,w,c
   893  000A38  0FBF               	addlw	191
   894  000A3A  6E08               	movwf	Lcd_Set_Cursor@temp,c
   895                           
   896                           ;lcd.h: 55: z = temp>>4;
   897  000A3C  3808               	swapf	Lcd_Set_Cursor@temp,w,c
   898  000A3E  0B0F               	andlw	15
   899  000A40  6E06               	movwf	Lcd_Set_Cursor@z,c
   900                           
   901                           ;lcd.h: 56: y = temp & 0x0F;
   902  000A42  5008               	movf	Lcd_Set_Cursor@temp,w,c
   903  000A44  0B0F               	andlw	15
   904  000A46  6E07               	movwf	Lcd_Set_Cursor@y,c
   905                           
   906                           ;lcd.h: 57: Lcd_Cmd(z);
   907  000A48  5006               	movf	Lcd_Set_Cursor@z,w,c
   908  000A4A  EC82  F005         	call	_Lcd_Cmd
   909                           
   910                           ;lcd.h: 58: Lcd_Cmd(y);
   911  000A4E  5007               	movf	Lcd_Set_Cursor@y,w,c
   912  000A50  EC82  F005         	call	_Lcd_Cmd
   913  000A54  0012               	return	
   914  000A56                     __end_of_Lcd_Set_Cursor:
   915                           	opt stack 0
   916                           tblptru	equ	0xFF8
   917                           tblptrh	equ	0xFF7
   918                           tblptrl	equ	0xFF6
   919                           tablat	equ	0xFF5
   920                           wreg	equ	0xFE8
   921                           status	equ	0xFD8
   922                           
   923 ;; *************** function _Lcd_Init *****************
   924 ;; Defined at:
   925 ;;		line 62 in file "lcd.h"
   926 ;; Parameters:    Size  Location     Type
   927 ;;		None
   928 ;; Auto vars:     Size  Location     Type
   929 ;;		None
   930 ;; Return value:  Size  Location     Type
   931 ;;                  1    wreg      void 
   932 ;; Registers used:
   933 ;;		wreg, status,2, cstack
   934 ;; Tracked objects:
   935 ;;		On entry : 0/0
   936 ;;		On exit  : 0/0
   937 ;;		Unchanged: 0/0
   938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   939 ;;      Params:         0       0       0       0       0       0       0       0       0
   940 ;;      Locals:         0       0       0       0       0       0       0       0       0
   941 ;;      Temps:          1       0       0       0       0       0       0       0       0
   942 ;;      Totals:         1       0       0       0       0       0       0       0       0
   943 ;;Total ram usage:        1 bytes
   944 ;; Hardware stack levels used:    1
   945 ;; Hardware stack levels required when called:    2
   946 ;; This function calls:
   947 ;;		_Lcd_Cmd
   948 ;;		_Lcd_Port
   949 ;; This function is called by:
   950 ;;		_main
   951 ;; This function uses a non-reentrant model
   952 ;;
   953                           
   954                           	psect	text6
   955  000996                     __ptext6:
   956                           	opt stack 0
   957  000996                     _Lcd_Init:
   958                           	opt stack 28
   959                           
   960                           ;lcd.h: 64: Lcd_Port(0x00);
   961                           
   962                           ;incstack = 0
   963  000996  0E00               	movlw	0
   964  000998  EC6C  F005         	call	_Lcd_Port
   965                           
   966                           ;lcd.h: 65: _delay((unsigned long)((20)*(8000000/4000.0)));
   967  00099C  0E34               	movlw	52
   968  00099E  6E04               	movwf	??_Lcd_Init& (0+255),c
   969  0009A0  0EF2               	movlw	242
   970  0009A2                     u267:
   971  0009A2  2EE8               	decfsz	wreg,f,c
   972  0009A4  D7FE               	bra	u267
   973  0009A6  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
   974  0009A8  D7FC               	bra	u267
   975                           
   976                           ;lcd.h: 66: Lcd_Cmd(0x03);
   977  0009AA  0E03               	movlw	3
   978  0009AC  EC82  F005         	call	_Lcd_Cmd
   979                           
   980                           ;lcd.h: 67: _delay((unsigned long)((5)*(8000000/4000.0)));
   981  0009B0  0E0D               	movlw	13
   982  0009B2  6E04               	movwf	??_Lcd_Init& (0+255),c
   983  0009B4  0EFC               	movlw	252
   984  0009B6                     u277:
   985  0009B6  2EE8               	decfsz	wreg,f,c
   986  0009B8  D7FE               	bra	u277
   987  0009BA  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
   988  0009BC  D7FC               	bra	u277
   989                           
   990                           ;lcd.h: 68: Lcd_Cmd(0x03);
   991  0009BE  0E03               	movlw	3
   992  0009C0  EC82  F005         	call	_Lcd_Cmd
   993                           
   994                           ;lcd.h: 69: _delay((unsigned long)((11)*(8000000/4000.0)));
   995  0009C4  0E1D               	movlw	29
   996  0009C6  6E04               	movwf	??_Lcd_Init& (0+255),c
   997  0009C8  0E91               	movlw	145
   998  0009CA                     u287:
   999  0009CA  2EE8               	decfsz	wreg,f,c
  1000  0009CC  D7FE               	bra	u287
  1001  0009CE  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  1002  0009D0  D7FC               	bra	u287
  1003  0009D2  F000               	nop	
  1004                           
  1005                           ;lcd.h: 70: Lcd_Cmd(0x03);
  1006  0009D4  0E03               	movlw	3
  1007  0009D6  EC82  F005         	call	_Lcd_Cmd
  1008                           
  1009                           ;lcd.h: 72: Lcd_Cmd(0x02);
  1010  0009DA  0E02               	movlw	2
  1011  0009DC  EC82  F005         	call	_Lcd_Cmd
  1012                           
  1013                           ;lcd.h: 73: Lcd_Cmd(0x02);
  1014  0009E0  0E02               	movlw	2
  1015  0009E2  EC82  F005         	call	_Lcd_Cmd
  1016                           
  1017                           ;lcd.h: 74: Lcd_Cmd(0x08);
  1018  0009E6  0E08               	movlw	8
  1019  0009E8  EC82  F005         	call	_Lcd_Cmd
  1020                           
  1021                           ;lcd.h: 75: Lcd_Cmd(0x00);
  1022  0009EC  0E00               	movlw	0
  1023  0009EE  EC82  F005         	call	_Lcd_Cmd
  1024                           
  1025                           ;lcd.h: 76: Lcd_Cmd(0x0C);
  1026  0009F2  0E0C               	movlw	12
  1027  0009F4  EC82  F005         	call	_Lcd_Cmd
  1028                           
  1029                           ;lcd.h: 77: Lcd_Cmd(0x00);
  1030  0009F8  0E00               	movlw	0
  1031  0009FA  EC82  F005         	call	_Lcd_Cmd
  1032                           
  1033                           ;lcd.h: 78: Lcd_Cmd(0x06);
  1034  0009FE  0E06               	movlw	6
  1035  000A00  EC82  F005         	call	_Lcd_Cmd
  1036  000A04  0012               	return		;funcret
  1037  000A06                     __end_of_Lcd_Init:
  1038                           	opt stack 0
  1039                           tblptru	equ	0xFF8
  1040                           tblptrh	equ	0xFF7
  1041                           tblptrl	equ	0xFF6
  1042                           tablat	equ	0xFF5
  1043                           wreg	equ	0xFE8
  1044                           status	equ	0xFD8
  1045                           
  1046 ;; *************** function _Lcd_Clear *****************
  1047 ;; Defined at:
  1048 ;;		line 35 in file "lcd.h"
  1049 ;; Parameters:    Size  Location     Type
  1050 ;;		None
  1051 ;; Auto vars:     Size  Location     Type
  1052 ;;		None
  1053 ;; Return value:  Size  Location     Type
  1054 ;;                  2   32[None  ] int 
  1055 ;; Registers used:
  1056 ;;		wreg, status,2, cstack
  1057 ;; Tracked objects:
  1058 ;;		On entry : 0/0
  1059 ;;		On exit  : 0/0
  1060 ;;		Unchanged: 0/0
  1061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1062 ;;      Params:         0       0       0       0       0       0       0       0       0
  1063 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1064 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1065 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1066 ;;Total ram usage:        0 bytes
  1067 ;; Hardware stack levels used:    1
  1068 ;; Hardware stack levels required when called:    2
  1069 ;; This function calls:
  1070 ;;		_Lcd_Cmd
  1071 ;; This function is called by:
  1072 ;;		_main
  1073 ;; This function uses a non-reentrant model
  1074 ;;
  1075                           
  1076                           	psect	text7
  1077  000B4E                     __ptext7:
  1078                           	opt stack 0
  1079  000B4E                     _Lcd_Clear:
  1080                           	opt stack 28
  1081                           
  1082                           ;lcd.h: 37: Lcd_Cmd(0);
  1083                           
  1084                           ;incstack = 0
  1085  000B4E  0E00               	movlw	0
  1086  000B50  EC82  F005         	call	_Lcd_Cmd
  1087                           
  1088                           ;lcd.h: 38: Lcd_Cmd(1);
  1089  000B54  0E01               	movlw	1
  1090  000B56  EC82  F005         	call	_Lcd_Cmd
  1091  000B5A  0012               	return		;funcret
  1092  000B5C                     __end_of_Lcd_Clear:
  1093                           	opt stack 0
  1094                           tblptru	equ	0xFF8
  1095                           tblptrh	equ	0xFF7
  1096                           tblptrl	equ	0xFF6
  1097                           tablat	equ	0xFF5
  1098                           wreg	equ	0xFE8
  1099                           status	equ	0xFD8
  1100                           
  1101 ;; *************** function _Lcd_Cmd *****************
  1102 ;; Defined at:
  1103 ;;		line 26 in file "lcd.h"
  1104 ;; Parameters:    Size  Location     Type
  1105 ;;  a               1    wreg     unsigned char 
  1106 ;; Auto vars:     Size  Location     Type
  1107 ;;  a               1    2[COMRAM] unsigned char 
  1108 ;; Return value:  Size  Location     Type
  1109 ;;                  1    wreg      void 
  1110 ;; Registers used:
  1111 ;;		wreg, status,2, cstack
  1112 ;; Tracked objects:
  1113 ;;		On entry : 0/0
  1114 ;;		On exit  : 0/0
  1115 ;;		Unchanged: 0/0
  1116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1117 ;;      Params:         0       0       0       0       0       0       0       0       0
  1118 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1119 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1120 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1121 ;;Total ram usage:        2 bytes
  1122 ;; Hardware stack levels used:    1
  1123 ;; Hardware stack levels required when called:    1
  1124 ;; This function calls:
  1125 ;;		_Lcd_Port
  1126 ;; This function is called by:
  1127 ;;		_Lcd_Clear
  1128 ;;		_Lcd_Set_Cursor
  1129 ;;		_Lcd_Init
  1130 ;;		_Lcd_Shift_Right
  1131 ;;		_Lcd_Shift_Left
  1132 ;; This function uses a non-reentrant model
  1133 ;;
  1134                           
  1135                           	psect	text8
  1136  000B04                     __ptext8:
  1137                           	opt stack 0
  1138  000B04                     _Lcd_Cmd:
  1139                           	opt stack 28
  1140                           
  1141                           ;incstack = 0
  1142                           ;Lcd_Cmd@a stored from wreg
  1143  000B04  6E03               	movwf	Lcd_Cmd@a,c
  1144                           
  1145                           ;lcd.h: 28: RD2 = 0;
  1146  000B06  9483               	bcf	3971,2,c	;volatile
  1147                           
  1148                           ;lcd.h: 29: Lcd_Port(a);
  1149  000B08  5003               	movf	Lcd_Cmd@a,w,c
  1150  000B0A  EC6C  F005         	call	_Lcd_Port
  1151                           
  1152                           ;lcd.h: 30: RD3 = 1;
  1153  000B0E  8683               	bsf	3971,3,c	;volatile
  1154                           
  1155                           ;lcd.h: 31: _delay((unsigned long)((4)*(8000000/4000.0)));
  1156  000B10  0E0B               	movlw	11
  1157  000B12  6E02               	movwf	??_Lcd_Cmd& (0+255),c
  1158  000B14  0E62               	movlw	98
  1159  000B16                     u297:
  1160  000B16  2EE8               	decfsz	wreg,f,c
  1161  000B18  D7FE               	bra	u297
  1162  000B1A  2E02               	decfsz	??_Lcd_Cmd& (0+255),f,c
  1163  000B1C  D7FC               	bra	u297
  1164  000B1E  D000               	nop2	
  1165                           
  1166                           ;lcd.h: 32: RD3 = 0;
  1167  000B20  9683               	bcf	3971,3,c	;volatile
  1168  000B22  0012               	return		;funcret
  1169  000B24                     __end_of_Lcd_Cmd:
  1170                           	opt stack 0
  1171                           tblptru	equ	0xFF8
  1172                           tblptrh	equ	0xFF7
  1173                           tblptrl	equ	0xFF6
  1174                           tablat	equ	0xFF5
  1175                           wreg	equ	0xFE8
  1176                           status	equ	0xFD8
  1177                           
  1178 ;; *************** function _Lcd_Port *****************
  1179 ;; Defined at:
  1180 ;;		line 4 in file "lcd.h"
  1181 ;; Parameters:    Size  Location     Type
  1182 ;;  a               1    wreg     unsigned char 
  1183 ;; Auto vars:     Size  Location     Type
  1184 ;;  a               1    0[COMRAM] unsigned char 
  1185 ;; Return value:  Size  Location     Type
  1186 ;;                  1    wreg      void 
  1187 ;; Registers used:
  1188 ;;		wreg
  1189 ;; Tracked objects:
  1190 ;;		On entry : 0/0
  1191 ;;		On exit  : 0/0
  1192 ;;		Unchanged: 0/0
  1193 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1194 ;;      Params:         0       0       0       0       0       0       0       0       0
  1195 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1196 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1197 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1198 ;;Total ram usage:        1 bytes
  1199 ;; Hardware stack levels used:    1
  1200 ;; This function calls:
  1201 ;;		Nothing
  1202 ;; This function is called by:
  1203 ;;		_Lcd_Cmd
  1204 ;;		_Lcd_Init
  1205 ;;		_Lcd_Write_Char
  1206 ;; This function uses a non-reentrant model
  1207 ;;
  1208                           
  1209                           	psect	text9
  1210  000AD8                     __ptext9:
  1211                           	opt stack 0
  1212  000AD8                     _Lcd_Port:
  1213                           	opt stack 28
  1214                           
  1215                           ;incstack = 0
  1216                           ;Lcd_Port@a stored from wreg
  1217  000AD8  6E01               	movwf	Lcd_Port@a,c
  1218                           
  1219                           ;lcd.h: 6: if(a & 1)
  1220  000ADA  A001               	btfss	Lcd_Port@a,0,c
  1221  000ADC  D002               	goto	l19
  1222                           
  1223                           ;lcd.h: 7: RD4 = 1;
  1224  000ADE  8883               	bsf	3971,4,c	;volatile
  1225  000AE0  D001               	goto	l20
  1226  000AE2                     l19:
  1227                           
  1228                           ;lcd.h: 8: else
  1229                           ;lcd.h: 9: RD4 = 0;
  1230  000AE2  9883               	bcf	3971,4,c	;volatile
  1231  000AE4                     l20:
  1232                           
  1233                           ;lcd.h: 11: if(a & 2)
  1234  000AE4  A201               	btfss	Lcd_Port@a,1,c
  1235  000AE6  D002               	goto	l21
  1236                           
  1237                           ;lcd.h: 12: RD5 = 1;
  1238  000AE8  8A83               	bsf	3971,5,c	;volatile
  1239  000AEA  D001               	goto	l22
  1240  000AEC                     l21:
  1241                           
  1242                           ;lcd.h: 13: else
  1243                           ;lcd.h: 14: RD5 = 0;
  1244  000AEC  9A83               	bcf	3971,5,c	;volatile
  1245  000AEE                     l22:
  1246                           
  1247                           ;lcd.h: 16: if(a & 4)
  1248  000AEE  A401               	btfss	Lcd_Port@a,2,c
  1249  000AF0  D002               	goto	l23
  1250                           
  1251                           ;lcd.h: 17: RD6 = 1;
  1252  000AF2  8C83               	bsf	3971,6,c	;volatile
  1253  000AF4  D001               	goto	l24
  1254  000AF6                     l23:
  1255                           
  1256                           ;lcd.h: 18: else
  1257                           ;lcd.h: 19: RD6 = 0;
  1258  000AF6  9C83               	bcf	3971,6,c	;volatile
  1259  000AF8                     l24:
  1260                           
  1261                           ;lcd.h: 21: if(a & 8)
  1262  000AF8  A601               	btfss	Lcd_Port@a,3,c
  1263  000AFA  D002               	goto	l25
  1264                           
  1265                           ;lcd.h: 22: RD7 = 1;
  1266  000AFC  8E83               	bsf	3971,7,c	;volatile
  1267  000AFE  0012               	return	
  1268  000B00                     l25:
  1269                           
  1270                           ;lcd.h: 23: else
  1271                           ;lcd.h: 24: RD7 = 0;
  1272  000B00  9E83               	bcf	3971,7,c	;volatile
  1273  000B02  0012               	return	
  1274  000B04                     __end_of_Lcd_Port:
  1275                           	opt stack 0
  1276                           tblptru	equ	0xFF8
  1277                           tblptrh	equ	0xFF7
  1278                           tblptrl	equ	0xFF6
  1279                           tablat	equ	0xFF5
  1280                           wreg	equ	0xFE8
  1281                           status	equ	0xFD8
  1282                           tblptru	equ	0xFF8
  1283                           tblptrh	equ	0xFF7
  1284                           tblptrl	equ	0xFF6
  1285                           tablat	equ	0xFF5
  1286                           wreg	equ	0xFE8
  1287                           status	equ	0xFD8
  1288                           
  1289                           	psect	rparam
  1290  0000                     tblptru	equ	0xFF8
  1291                           tblptrh	equ	0xFF7
  1292                           tblptrl	equ	0xFF6
  1293                           tablat	equ	0xFF5
  1294                           wreg	equ	0xFE8
  1295                           status	equ	0xFD8


Data Sizes:
    Strings     64
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     14      14
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 17
		 -> STR_5(CODE[16]), STR_4(CODE[3]), STR_3(CODE[16]), STR_2(CODE[17]), 
		 -> STR_1(CODE[15]), 


Critical Paths under _main in COMRAM

    _main->_Lcd_Write_String
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Shift_Right->_Lcd_Cmd
    _Lcd_Shift_Left->_Lcd_Cmd
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0    1963
                                             10 COMRAM     4     4      0
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                     _Lcd_Shift_Left
                    _Lcd_Shift_Right
                     _Lcd_Write_Char
                   _Lcd_Write_String
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     6     4      2     590
                                              4 COMRAM     6     4      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       3     3      0     120
                                              1 COMRAM     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Shift_Right                                      0     0      0      75
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Shift_Left                                       0     0      0      75
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       5     4      1     801
                                              3 COMRAM     5     4      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             1     1      0     135
                                              3 COMRAM     1     1      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0      75
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              2     2      0      75
                                              1 COMRAM     2     2      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      60
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Shift_Left
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Shift_Right
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_Char
     _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F      E       E       1       14.7%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
ABS                  0      0       0      20        0.0%
BIGRAM             7FF      0       0      21        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V1.43 build -156212558 
Symbol Table                                                                                   Wed Sep 27 22:26:58 2017

                       l20 0AE4                         l21 0AEC                         l22 0AEE  
                       l23 0AF6                         l24 0AF8                         l25 0B00  
                       l19 0AE2                         l36 0A2E                         l62 084A  
                       l48 0A80                         l49 0A60                __CFG_BOR$ON 000000  
              __CFG_BORV$3 000000               __CFG_CP0$OFF 000000               __CFG_CP1$OFF 000000  
             __CFG_CP2$OFF 000000               __CFG_CP3$OFF 000000                        l941 0928  
                      l943 0930                        l929 08FC                        l955 095C  
             __CFG_CPB$OFF 000000                        _RD2 007C1A                        _RD3 007C1B  
                      _RD4 007C1C                        _RD5 007C1D                        _RD6 007C1E  
                      _RD7 007C1F                        u207 08CC                        u160 0928  
                      u217 0912                        u227 0946                        u180 095C  
                      u237 0986                        u247 0ABC                        u257 0ACE  
             __CFG_CPD$OFF 000000                        u267 09A2                        u277 09B6  
                      u197 0884                        u287 09CA                        u297 0B16  
                      wreg 000FE8               __CFG_FOSC$HS 000000               __CFG_LVP$OFF 000000  
             __CFG_WDT$OFF 000000                       STR_1 0832                       STR_2 0801  
                     STR_3 0822                       STR_4 081F                       STR_5 0812  
        ?_Lcd_Write_String 0005                       _main 0842                       start 0000  
       ??_Lcd_Write_String 0007              __CFG_IESO$OFF 000000            __end_of_Lcd_Cmd 0B24  
            __CFG_MCLRE$ON 000000               ___param_bank 000000              __CFG_PLLDIV$5 000000  
           __CFG_CCP2MX$ON 000000                      ?_main 0001              __CFG_USBDIV$2 000000  
  __size_of_Lcd_Set_Cursor 0050                      _TRISD 000F95              __CFG_PWRT$OFF 000000  
            __CFG_WRT0$OFF 000000              __CFG_WRT1$OFF 000000              __CFG_WRT2$OFF 000000  
            __CFG_WRT3$OFF 000000             __CFG_EBTR0$OFF 000000             __CFG_FCMEN$OFF 000000  
           __CFG_EBTR1$OFF 000000             __CFG_EBTR2$OFF 000000             __CFG_EBTR3$OFF 000000  
            __CFG_WRTB$OFF 000000              __CFG_WRTC$OFF 000000              __CFG_WRTD$OFF 000000  
           __CFG_EBTRB$OFF 000000    __size_of_Lcd_Shift_Left 000E                      main@a 000D  
                    tablat 000FF5                      status 000FD8             __CFG_ICPRT$OFF 000000  
           __CFG_PBADEN$ON 000000           __end_of_Lcd_Init 0A06           __end_of_Lcd_Port 0B04  
          __initialization 0B24               __end_of_main 0996                     ??_main 000B  
       __size_of_Lcd_Clear 000E              __activetblptr 000001                  ??_Lcd_Cmd 0002  
  __size_of_Lcd_Write_Char 0038             __CFG_XINST$OFF 000000             __CFG_STVREN$ON 000000  
 __size_of_Lcd_Shift_Right 000E               __mediumconst 0000                     tblptrh 000FF7  
                   tblptrl 000FF6                     tblptru 000FF8            Lcd_Set_Cursor@a 0005  
          Lcd_Set_Cursor@b 0004            Lcd_Set_Cursor@y 0007            Lcd_Set_Cursor@z 0006  
               __accesstop 0060    __end_of__initialization 0B24          __end_of_Lcd_Clear 0B5C  
            ___rparam_used 000001             __pcstackCOMRAM 0001             _Lcd_Set_Cursor 0A06  
           _Lcd_Shift_Left 0B40                  ?_Lcd_Init 0001                  ?_Lcd_Port 0001  
__size_of_Lcd_Write_String 004A     __end_of_Lcd_Set_Cursor 0A56     __end_of_Lcd_Shift_Left 0B4E  
        ??_Lcd_Shift_Right 0004                 ??_Lcd_Init 0004                 ??_Lcd_Port 0001  
          __CFG_VREGEN$OFF 000000             _Lcd_Write_Char 0AA0                    _Lcd_Cmd 0B04  
                  __Hparam 0000                    __Lparam 0000               __psmallconst 0800  
                  __pcinit 0B24                    __ramtop 0800            ?_Lcd_Set_Cursor 0004  
                  __ptext0 0842                    __ptext1 0A56                    __ptext2 0AA0  
                  __ptext3 0B32                    __ptext4 0B40                    __ptext5 0A06  
                  __ptext6 0996                    __ptext7 0B4E                    __ptext8 0B04  
                  __ptext9 0AD8            ?_Lcd_Shift_Left 0001     __end_of_Lcd_Write_Char 0AD8  
     end_of_initialization 0B24                  Lcd_Port@a 0001            ?_Lcd_Write_Char 0001  
        Lcd_Write_String@a 0005          Lcd_Write_String@i 0009                  _Lcd_Clear 0B4E  
         _Lcd_Write_String 0A56        start_initialization 0B24          __size_of_Lcd_Init 0070  
        __size_of_Lcd_Port 002C                 ?_Lcd_Clear 0001            _Lcd_Shift_Right 0B32  
         __CFG_LPT1OSC$OFF 000000            Lcd_Write_Char@a 0004            Lcd_Write_Char@y 0003  
                 ?_Lcd_Cmd 0001           ??_Lcd_Set_Cursor 0005           ??_Lcd_Shift_Left 0004  
              __smallconst 0800    __end_of_Lcd_Shift_Right 0B40                   Lcd_Cmd@a 0003  
              ??_Lcd_Clear 0004           __CFG_WDTPS$32768 000000           ??_Lcd_Write_Char 0002  
                 _Lcd_Init 0996                   _Lcd_Port 0AD8   __end_of_Lcd_Write_String 0AA0  
         __size_of_Lcd_Cmd 0020                   __Hrparam 0000                   __Lrparam 0000  
             __Lsmallconst 0800              __size_of_main 0154           ?_Lcd_Shift_Right 0001  
    __CFG_CPUDIV$OSC1_PLL2 000000         Lcd_Write_Char@temp 0002         Lcd_Set_Cursor@temp 0008  
